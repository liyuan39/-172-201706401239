#include<stdio.h>
#include<math.h>

    int a[100];//定义最多100个物品的价值
    float b[100][100];//定义数组b[][]表示物品数（变量数）及约束数
    float h[100];//定义背包的约束和
    int n,m;//定义n为物品数（列长度数），m为约束数（行长度数）
    int d;
    int s;
	int t1,t2;
    int cp=0;   //当前背包价值
    int bestv=0;  //迄今最大的价值
    int x[100];  //记录在树中的移动路径,为1的时候表示选择该组数据，为0的表示不选择该组数据

void panduan(int i)//定义一个形参int i 用于调用函数
{//printf("%d",i);
    if(i==n)//递归结束的判定条件，与下一个else
    {
        if(cp>bestv)//排序所得的价值，取最大
		{ 
			bestv=cp;
printf("%d",bestv);
printf("\n");
        }
    }
	else{	
		x[i]=1;//假设取
	for(int k=0;k<m;k++)//循环取不取的操作次数（行长度数），判断该物品所有约束都符合条件
	{
		if(h[k]-b[k][i]<0)//如果约束和-所取的约束值0，说明所取约束值不能进入当前的约束和中去，则不取该物品
		{
			x[i]=0;//进入值为0的孩子
		break;
		}
	}
    if(x[i]==1)//进入该节点的右孩子(值为1的孩子),约束值符合条件取
    {
        for(int t=0;t<m;t++)//计算约束值循环次数（行长度数）
		{
			h[t]-=b[t][i];//计算约束值是否符合剩余的约束
		}
        cp+=a[i];//更新价值
        panduan(i+1);
       for(int k=0;k<m;k++)//更新约束值得和
		{
		   h[k]+=b[k][i];//更新约束值
	   }
        cp-=a[i]; //此处回溯
    }
	 panduan(i+1);
}  
}

void main(){
	
	//输入相关数据变量数组等

	 printf("请输入物品个数：");
	 scanf("%d",&n);

	 printf("请输入约束个数：");
	 scanf("%d",&m);

	 

     printf("请依次输入物品的价值：");
	 for(s=0;s<n;s++){
     scanf("%d",&a[s]);
	 }

	 printf("请依次输入物品的约束数:");//输出转化为二维数组输出
	 for(t1=0;t1<m;t1++)
	 {
		 for(t2=0;t2<n;t2++)
		 {
	 scanf("%d",&b[t1][t2]);
		 }
	 }
	 printf("请依次输入背包约束和:");
	 for(d=0;d<m;d++){
		 scanf("%d",&h[d]);}
	 panduan(0);
}
